#lang racket
(require rackunit)

(define expected
  '((1 233168)
    (2 4613732)
    (3 6857)
    (4 906609)
    (5 232792560)
    (6 25164150)
    (7 104743)
    (8 40824)
    (9 31875000)
    (10 142913828922)
    (11 70600674)
    (12 76576500)
    (13 5537376230)
    (14 837799)
    (15 137846528820)
    (16 1366)
    (17 21124)
    (18 1074)
    (19 171)
    (20 648)
    (21 31626)
    (22 871198282)
    (23 4179871)
    (24 2783915460)
    (25 4782)
    (26 983)
    (27 -59231)
    (28 669171001)
    (29 9183)
    (30 443839)
    (31 73682)
    (32 45228)
    (33 100)
    (34 40730)
    (35 55)
    (36 872187)
    (37 748317)
    (38 932718654)
    (39 840)
    (40 210)
    (41 7652413)
    (42 162)
    (43 16695334890)
    (44 5482660)
    (45 1533776805)
    (46 5777)
    (47 134043)
    (48 9110846700)
    (49 296962999629)
    (50 997651)
    (51 121313)
    (52 142857)
    (53 4075)
    (54 376)
    (55 249)
    (56 972)
    (57 153)
    (58 26241)
    (59 107359)
    (60 26033)
    (61 28684)
    (62 127035954683)
    (63 49)
    (64 1322)
    (65 272)
    (66 661)
    (67 7273)
    (68 6531031914842725)
    (69 510510)
    (70 8319823)
    (71 428570)
    (72 303963552391)
    (73 7295372)
    (74 402)
    (75 161667)
    (76 190569291)
    (77 71)
    (78 55374)
    (79 73162890)
    (80 40886)
    (81 427337)
    (82 260324)
    (83 425185)
    (84 101524)
    (85 2772)
    (86 1818)
    (87 1097343)
    (88 7587457)
    (89 743)
    (90 1217)
    (91 14234)
    (92 8581146)
    (93 1258)
    (94 518408346)
    (95 14316)
    (96 24702)
    (97 8739992577)
    (98 18769)
    (99 709)
    (100 756872327473)
    (101 37076114526)
    (102 228)
    (103 20313839404245)
    (104 329468)
    (105 73702)
    (106 21384)
    (107 259679)
    (108 180180)
    (109 38182)
    (110 9350130049860600)
    (111 612407567715)
    (112 1587000)
    (113 51161058134250)
    (114 16475640049)
    (115 168)
    (116 20492570929)
    (117 100808458960497)
    (118 44680)
    (119 248155780267521)
    (120 333082500)
    (122 1582)))

(define (test-problem p s)
  (printf "Test ~a\t" p)
  (define start-time (current-milliseconds))
  (define result ((dynamic-require (format "~a.rkt" p) 'solve)))
  (if (equal? result s)
      (printf "...OK (~as)\n" (/ (exact->inexact (- (current-milliseconds) start-time))
                                 1000))
      (printf "...FAILED (Got ~a, Expected ~a\n)" result s)))

(define (test n)
  (match (assoc (and n (string->number n)) expected)
    [(list problem-number solution) (test-problem problem-number solution)]
    [else
     (for-each
      (lambda (x) (apply test-problem x))
      expected)]))

(define args (current-command-line-arguments))
(test (and (not (zero? (vector-length args)))
           (vector-ref (current-command-line-arguments) 0)))